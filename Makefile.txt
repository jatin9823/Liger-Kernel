To simplify and make the Makefile code more readable and unique, we can refactor and streamline some sections while maintaining the original functionality. Here’s the revised version of your Makefile:

Key Changes:
Use set -e to ensure that any failure in a command stops the execution immediately.
Simplify how statuses for flake8, isort, and black are handled, reducing redundancy.
Add comments for clarity and organize variable definitions at the top.
Simplify the loop for running benchmark scripts.
Explanation of Changes:
Reduced redundancy in the checkstyle target:

Used set -e to stop execution on the first failure. This way, you don’t need to manually check the status of each tool (flake8, isort, black). If one fails, the others won’t run, and the command exits with failure.
Simplified the benchmark loop:

Cleaned up the loop for running benchmark scripts, making it more concise and easier to read. This also prints a message before each script runs.
Added @echo statements for clarity:

The @echo statements provide helpful output to the terminal, so the user knows exactly what is happening at each step.
Enhanced readability by breaking the file into clear sections with comments and grouping variable definitions at the top.

This version is simpler, easier to maintain, and provides more clarity during execution, while preserving all the original functionality.







.PHONY: test checkstyle test-convergence all run-benchmarks

# Variables
BENCHMARK_DIR = benchmark/scripts
BENCHMARK_SCRIPTS = $(wildcard $(BENCHMARK_DIR)/benchmark_*.py)
OVERWRITE ?= 0

# Run all the main tasks
all: checkstyle test test-convergence

# Command to run pytest for correctness tests
test:
	@echo "Running correctness tests..."
	python -m pytest --disable-warnings test/ --ignore=test/convergence

# Command to check code style (flake8), import order (isort), and formatting (black)
checkstyle:
	@echo "Checking code style with flake8, isort, and black..."
	set -e; \
	flake8 .; \
	isort .; \
	black .;

# Command to run convergence tests with datasets in offline mode
test-convergence:
	@echo "Running convergence tests..."
	HF_DATASETS_OFFLINE=1 python -m pytest --disable-warnings test/convergence

# Run all benchmark scripts and update benchmarking data file
run-benchmarks:
	@echo "Running benchmark scripts..."
	@for script in $(BENCHMARKS_SCRIPTS); do \
		echo "Running $$script..."; \
		if [ $(OVERWRITE) -eq 1 ]; then \
			python $$script --overwrite; \
		else \
			python $$script; \
		fi; \
	done
